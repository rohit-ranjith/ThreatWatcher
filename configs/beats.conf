input {
  beats {
    port => 5044
  }
}

filter {
  if [log_type] == "anomaly" {
    csv {
      separator => ","
      columns => ["timestamp", "src_ip", "dst_ip", "src_port", "dst_port", "protocol_name", "length", "tcp_flags", "anomaly", "prediction"]
    }

    mutate {
      convert => {
        "src_port" => "integer"
        "dst_port" => "integer"
        "length" => "integer"
        "prediction" => "integer"
      }
      add_field => {
        "summary" => "%{src_ip}:%{src_port} → %{dst_ip}:%{dst_port} (%{protocol_name}, %{length} bytes)"
      }
    }

    date {
      match => ["timestamp", "yyyy-MM-dd HH:mm:ss"]
      target => "@timestamp"
      timezone => "UTC"
    }

    if [anomaly] == "anomaly" or [prediction] == 1 {
      mutate {
        add_tag => ["network-anomaly"]
      }
    }

    mutate {
      remove_field => ["host", "agent", "ecs", "input", "log", "event", "tags"]
    } 
  }
  else if [log_type] == "auth" {
    grok {
      match => {
        "message" => [
          "%{TIMESTAMP_ISO8601:syslog_timestamp} %{HOSTNAME:syslog_host} %{WORD:program}: %{GREEDYDATA:message_content}"
        ]
      }
    }

    mutate {
      add_field => { "debug_message" => "%{message_content}" }
    }


    if [message_content] =~ /(sudo|failed|invalid|root|denied|authentication failure|incorrect password|pam_unix)/ {
      mutate {
        add_field => { "alert_tag" => "ALERT" }
      }
    } else {
      mutate {
        add_field => { "alert_tag" => "normal" }
      }
    }

    mutate {
      add_field => {
        "auth_summary" => "%{program} → %{message_content}"
      }
    }

    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      target => "@timestamp"
    }
  }
}

output {
  if [log_type] == "anomaly" {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "anomaly-logs-%{+YYYY.MM.dd}"
    }
  } else if [log_type] == "auth" {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "auth-logs-%{+YYYY.MM.dd}"
    }
  }
}

